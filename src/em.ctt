{- Eilenberg-MacLane Spaces:
   Copyright (c) Groupoid Infinity, 2014-2020.

   HoTT 8.10.3 K(G,n) Spaces -}

module em where
import algebra
import trunc
import pointed
import suspension
import hubspokes
import nat

-- K1' is not yet truncated K(G,1)
data K1' (G : group)
   = baseK1'
   | loopK1' (x : G.1.1) <i> [ (i = 0) -> baseK1' , (i = 1) -> baseK1' ]
   | loopMulK1' (a b : G.1.1)
     <i j> [ (i = 0) -> comp (<_> K1' G) baseK1'
                        [ (j = 0) -> <k> loopK1' {K1' G} a @ k ,
                          (j = 1) -> <k> loopK1' {K1' G} b @ k ] ,
             (i = 1) -> loopK1' {K1' G} (opGroup G a b) @ j ,
             (j = 0) -> baseK1' ,
             (j = 1) -> baseK1' ]

-- Nat-indexed Abelian K(G,n) suitable for EM-spectrum HZ
-- Properties: π_{n}(K(G,n))=G \/ π_{k/=n}(K(G,n))=1
KGn (G: abgroup) (n: nat): U = nTrunc (suspension (K1' (G.1,G.2.1)) n)  n

-- Direct Encoding
K1 (G: group): U = grpdTrunc  (K1' G)
K2 (G: group): U = grpd2Trunc (susp (K1' G))
K3 (G: group): U = grpd3Trunc (susp (susp (K1' G)))

baseK1  (G : group) : K1 G = inc baseK1'
loopsK1 (G : group) : U = Path (K1 G) (baseK1 G) (baseK1 G)
loopK1 (G : group) (x : G.1.1) : loopsK1 G = <i> inc (loopK1' {K1' G} x @ i)

multK1 (G : group) (a b : loopsK1 G) : loopsK1 G =
  <i> comp (<_> K1 G) (baseK1 G)
           [ (i = 0) -> a,
             (i = 1) -> b ]

