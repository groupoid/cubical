{- Eilenberg-MacLane Spaces:
   Copyright (c) Groupoid Infinity, 2014-2020.

   HoTT 8.10.3 K(G,n) Spaces -}

module em where
import algebra
import trunc
import pointed
import suspension
import hubspokes
import nat

-- K0' is a group G with the discrete toplogy
discreteGroup (_: abgroup): U = group -- TODO:

-- K1' is not yet truncated K(G,1)
data K1' (G : group)
   = pt
   | id (x : G.1.1)
       <i> [ (i = 0) -> pt ,
             (i = 1) -> pt ]
   | mul (a b : G.1.1)
     <i j> [ (i = 0) -> composition (K1' G) pt pt pt (<k> id {K1' G} a @ k) (<k> id {K1' G} b @ k) @ j ,
             (i = 1) -> id {K1' G} (opGroup G a b) @ j ,
             (j = 0) -> pt ,
             (j = 1) -> pt ]

-- Nat-indexed Abelian K(G,n) suitable for EM-spectrum HZ, n≥1
-- Properties: π_{n}(K(G,n))=G \/ π_{k/=n}(K(G,n))=1
KGn (G: abgroup)
  : nat -> U
  = split
    zero -> discreteGroup G
    succ n -> nTrunc (suspension (K1' (G.1,G.2.1)) n) (succ n)

-- Direct Encoding
K1 (G: group): U = grpdTrunc  (K1' G)
K2 (G: group): U = grpd2Trunc (susp (K1' G))
K3 (G: group): U = grpd3Trunc (susp (susp (K1' G)))

baseK1 (G : group) : K1 G = inc pt
loopSpaceK1 (G : group) : U = Path (K1 G) (baseK1 G) (baseK1 G)
loopK1 (G : group) (x : G.1.1) : loopSpaceK1 G = <i> inc (id {K1' G} x @ i)

multK1 (G : group) (a b : loopSpaceK1 G)
  : loopSpaceK1 G
  = composition (K1 G) (baseK1 G) (baseK1 G) (baseK1 G) a b

loopMulK1 (G : group) (a b : G.1.1)
  : Path (loopSpaceK1 G) (multK1 G (loopK1 G a) (loopK1 G b)) (loopK1 G (opGroup G a b))
  = composition
    (loopSpaceK1 G)
    (multK1 G (loopK1 G a) (loopK1 G b))
    (<i> inc (composition (K1' G) pt pt pt (<j> id {K1' G} a @ j) (<j> id {K1' G} b @ j) @ i))
    (loopK1 G (opGroup G a b))
    (mapOverComp (K1' G) (K1 G) (\(x:K1' G)->inc x) pt pt pt (<j> id {K1' G} a @ j) (<j> id {K1' G} b @ j))
    (<i j> inc (mul{K1' G} a b @ i @ j))
