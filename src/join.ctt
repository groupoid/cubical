module join where
import proto
import iso
import s1
import pointed
import suspension

data join (A B : U) = inl (a : A)
                    | inr (b : B)
                    | pushC (a : A) (b : B) <i> [ (i = 0) -> inl a
                                                , (i = 1) -> inr b ]

pushP (A B : U) (a : A) (b : B) : Path (join A B) (inl a) (inr b) =
  <i> pushC {join A B} a b @ i

joinpt (A : pointed) (B : U) : pointed = (join A.1 B,inl (point A))

r2lInr (A B C : U) : join B C -> join (join A B) C = split
  inl b -> inl (inr b)
  inr c -> inr c
  pushC b c @ i -> pushP (join A B) C (inr b) c @ i

r2lPushInl (A B C : U) (a : A) (b : B) :
  Path (join (join A B) C) (inl (inl a)) (inl (inr b)) = <i> inl (pushP A B a b @ i)

r2lSquare (A B C : U) (a : A) (b : B) (c : C) :
        PathP (<i> Path (join (join A B) C) (inl (pushP A B a b @ i)) (inr c))
            (pushP (join A B) C (inl a) c) (pushP (join A B) C (inr b) c)
 = <i j> pushP (join A B) C (pushP A B a b @ i) c @ j

opr2l (A : U) (a b c : A) (p : Path A a c) (q : Path A a b) (r : Path A b c)
      (sq : Square A a b c c q (<_> c) p r) :
      Square A a a b c (<_> a) r q p =
         <i j> comp (<_> A) (p @ i) [ (i = 0) -> <k> q @ j /\ k
                               , (i = 1) -> <k> p @ j \/ -k
                               , (j = 0) -> <k> p @ i /\ -k
                               , (j = 1) -> <k> sq @ k @ i ]

r2lPushPush (A B C : U) (a : A) (b : B) (c : C) :
  Square (join (join A B) C) (inl (inl a)) (inl (inl a)) (inl (inr b)) (inr c)
         (<_> inl (inl a)) (pushP (join A B) C (inr b) c)
         (r2lPushInl A B C a b) (pushP (join A B) C (inl a) c) =
  opr2l (join (join A B) C) (inl (inl a)) (inl (inr b)) (inr c)
        (pushP (join A B) C (inl a) c) (r2lPushInl A B C a b)
        (pushP (join A B) C (inr b) c) (r2lSquare A B C a b c)

r2lPush (A B C : U) (a : A) :
  (bc : join B C) -> Path (join (join A B) C) (inl (inl a)) (r2lInr A B C bc) = split
    inl b -> r2lPushInl A B C a b
    inr c -> pushP (join A B) C (inl a) c
    pushC b c @ i -> r2lPushPush A B C a b c @ i

joinassoc1 (A B C : U) : join A (join B C) -> join (join A B) C = split
  inl a  -> inl (inl a)
  inr bc -> r2lInr A B C bc
  pushC a bc @ i -> r2lPush A B C a bc @ i

mapJoin (A A' B B' : U) (f : A -> A') (g : B -> B') : join A B -> join A' B' = split
  inl a -> inl (f a)
  inr b -> inr (g b)
  pushC a b @ i -> pushP A' B' (f a) (g b) @ i

psi (A : U) : susp A -> join bool A = split
  north -> inl true
  south -> inl false
  merid a @ i -> composition (join bool A) (inl true) (inr a) (inl false)
                             (pushP bool A true a) (<i> pushP bool A false a @ -i) @ i

psiinv (A : U) : join bool A -> susp A = split
  inl b ->
    let case : (b : bool) -> susp A = split
          false -> south
          true  -> north
    in case b
  inr a -> south
  pushC b a @ i ->
    let case (a : A) : (b : bool) -> Path (susp A) (psiinv A (inl b)) south = split
          false -> <_> south
          true  -> merid1 A a
    in case a b @ i

c (x : join bool bool) : S1 = suspS1 (psiinv bool x)

cinv (x : S1) : join bool bool = psi bool (S1susp x)

-- The map e
e (x : S3) : join S1 S1 =
  let x1 : join bool S2 = psi S2 x
      x2 : join bool (join bool S1) =
        mapJoin bool bool S2 (join bool S1) (idfun bool) (psi S1) x1
      x3 : join (join bool bool) S1 = joinassoc1 bool bool S1 x2
      res : join S1 S1 = mapJoin (join bool bool) S1 S1 S1 c (idfun S1) x3
  in res

prealpha : join S1 S1 -> S2 = split
  inl x -> north
  inr y -> north
  pushC x y @ i -> composition S2 north south north (merid1 S1 x) (<i> merid1 S1 y @ -i) @ i

alpha : pmap (joinpt S1pt S1) S2pt = (prealpha, <_> north)
