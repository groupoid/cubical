module quot where
import bishop
import subtype

-- quotients
setquot (X: U) (R: hrel X): U = (A : hsubtypes X) * (iseqclass X R A)

setsetquot (X : U) (R : hrel X) : isSet (setquot X R) =
  setSig (hsubtypes X) (\(A : hsubtypes X) -> iseqclass X R A) sA sB where
    sA : isSet (hsubtypes X) = sethsubtypes X
    sB (x : hsubtypes X) : isSet (iseqclass X R x) = propSet (iseqclass X R x) (propiseqclass X R x)

setquotpr (X : U) (R : eqrel X) (X0 : X) : setquot X R.1 = (A,((p1,p2),p3))
   where
   rax : isrefl X R.1 = eqrelrefl X R
   sax : issymm X R.1 = eqrelsymm X R
   tax : istrans X R.1 = eqreltrans X R
   A : hsubtypes X = \(x : X) -> R.1 X0 x
   p1 : (ishinh (carr X A)).1 = hinhpr (carr X A) (X0,rax X0)
   p2 (x1 x2 : X) (X1 : (R.1 x1 x2).1) (X2 : (A x1).1) : (A x2).1 = tax X0 x1 x2 X2 X1
   p3 (x1 x2 : X) (X1 : (A x1).1) (X2 : (A x2).1) : (R.1 x1 x2).1 = tax x1 X0 x2 (sax X0 x1 X1) X2

-- If f respects R then all x belonging to the equivalence class C are mapped into the same unique image
setquotmapcontr (A B : U) (sB : isSet B) (R : hrel A) (f : A -> B)
    (frr : funresprel A B f R) (C : setquot A R)
  : isContr ((y : B) * ((x : carr A C.1) -> Path B y (f x.1)))
  = let
    T : U = (y : B) * ((x : carr A C.1) -> Path B y (f x.1))
    pT (a b : T) : Path T a b
      = let
        h (x : carr A C.1) : Path B a.1 b.1 = <i> comp (<j> B) (a.2 x @ i)
          [ (i = 0) -> <j> a.1
          , (i = 1) -> <j> b.2 x @ -j ]
        p0 : Path B a.1 b.1
          = C.2.1.1 (Path B a.1 b.1, sB a.1 b.1) h
        p1 : PathP (<i> (x : carr A C.1) -> Path B (p0 @ i) (f x.1)) a.2 b.2
          = let
            P (b : B) : U
              = (x : carr A C.1) -> Path B b (f x.1)
            pP (b : B) (s t : (P b)) : Path (P b) s t
              = <i>  \ (x : carr A C.1) -> (sB b (f x.1) (s x) (t x)) @ i
          in lemPropF B P pP a.1 b.1 p0 a.2 b.2
      in <i> (p0 @ i, p1 @ i)
    h (x : carr A C.1) : T
      = (f x.1, \ (x' : carr A C.1) -> frr x.1 x'.1 (C.2.2 x.1 x'.1 x.2 x'.2))
    y : T
      = C.2.1.1 (T, pT) h
  in (y, pT y)

setquotmap (A B : U) (sB : isSet B) (R : hrel A) (f : A -> B)
    (frr : funresprel A B f R) (c : setquot A R) : B
  = (setquotmapcontr A B sB R f frr c).1.1

setquotmapeq (A B : U) (sB : isSet B) (R : eqrel A) (f : A -> B)
    (frr: funresprel A B f R.1) (x : A)
  : Path B (setquotmap A B sB R.1 f frr (setquotpr A R x)) (f x)
  =   (setquotmapcontr A B sB R.1 f frr (setquotpr A R x)).1.2 (x, R.2.1.2 x)

setquotpair (A B: U) (R0: hrel A) (R1: hrel B) (q0: setquot A R0) (q1: setquot B R1)
  : setquot (prod A B) (hrelpair A B R0 R1)
  = (hsubtypespair A B q0.1 q1.1,
     iseqclasspair A B R0 R1 q0.1 q1.1 q0.2 q1.2)

setquotmap2 (A B C : U) (sC : isSet C) (R0 : hrel A) (R1 : hrel B)
    (f : A -> B -> C) (frr : funresprel2 A B C f R0 R1) (c0 : setquot A R0)
    (c1 : setquot B R1) : C
  = let
    f' (t : prod A B) : C = f t.1 t.2
    R' : hrel (prod A B) = hrelpair A B R0 R1
    frr' (s t : prod A B) (r : (R' s t).1) : Path C (f' s) (f' t) = frr s.1 t.1 s.2 t.2 r.1 r.2
    c' : setquot (prod A B) R' = setquotpair A B R0 R1 c0 c1
  in setquotmap (prod A B) C sC R' f' frr' c'

setquotmapeq2 (A B C : U) (sC : isSet C) (R0 : eqrel A) (R1 : eqrel B)
    (f : A -> B -> C) (frr : funresprel2 A B C f R0.1 R1.1) (x0: A) (x1 : B)
  : Path C (setquotmap2 A B C sC R0.1 R1.1 f frr (setquotpr A R0 x0) (setquotpr B R1 x1)) (f x0 x1)
  = let
    f' (t : prod A B) : C = f t.1 t.2
    R : eqrel (prod A B) = eqrelpair A B R0 R1
    frr' (s t : prod A B) (r : (R.1 s t).1) : Path C (f' s) (f' t) = frr s.1 t.1 s.2 t.2 r.1 r.2
  in setquotmapeq (prod A B) C sC R f' frr' (x0, x1)

isEquivprop (A B : U) (f : A -> B) (g : B -> A) (pA : isProp A) (pB : isProp B) : isEquiv A B f = rem
  where
  rem (y : B) : isContr (fiber A B f y) = (s,t)
    where
    s : fiber A B f y = (g y,pB y (f (g y)))
    t (w : fiber A B f y) : Path ((x :  A) * Path B y (f x)) s w =
      subtypeEquality A (\(x : A) -> Path B y (f x)) pb s w r1
       where
       pb (x : A) : (a b : Path B y (f x)) -> Path (Path B y (f x)) a b = propSet B pB y (f x)
       r1 : Path A s.1 w.1 = pA s.1 w.1

equivhProp (P P' : PROP) (f : P.1 -> P'.1) (g : P'.1 -> P.1) : equiv P.1 P'.1 =
  (f,isEquivprop P.1 P'.1 f g P.2 P'.2)

uahp' (P P' : PROP) (f : P.1 -> P'.1) (g : P'.1 -> P.1) : Path PROP P P' =
  subtypeEquality U isProp propIsProp P P' rem
  where
  rem : Path U P.1 P'.1 = transport (<i> corrUniv P.1 P'.1 @ -i) (equivhProp P P' f g)

iscompsetquotpr (X : U) (R : eqrel X) (x x' : X) (a : (R.1 x x').1) :
  Path (setquot X R.1) (setquotpr X R x) (setquotpr X R x') =
  subtypeEquality (hsubtypes X) (iseqclass X R.1) rem1 (setquotpr X R x) (setquotpr X R x') rem2
  where
  rem1 (x : hsubtypes X) : isProp (iseqclass X R.1 x) = propiseqclass X R.1 x
  rem2 : Path (hsubtypes X) (setquotpr X R x).1 (setquotpr X R x').1 =
    <i> \(x0 : X) -> rem x0 @ i
    where
    rem (x0 : X) : Path PROP (R.1 x x0) (R.1 x' x0) = uahp' (R.1 x x0) (R.1 x' x0) f g
      where
      f (r0 : (R.1 x x0).1) : (R.1 x' x0).1 = eqreltrans X R x' x x0 (eqrelsymm X R x x' a) r0
      g (r0 : (R.1 x' x0).1) : (R.1 x x0).1 = eqreltrans X R x x' x0 a r0

eqax0 (X: U) (R: hrel X) (A: hsubtypes X) (c: iseqclass X R A): (ishinh (carr X A)).1 = c.1.1
eqax1 (X: U) (R: hrel X) (A: hsubtypes X) (c: iseqclass X R A): (x1 x2: X)->(R x1 x2).1->(A x1).1->(A x2).1=c.1.2
eqax2 (X: U) (R: hrel X) (A: hsubtypes X) (c: iseqclass X R A): (x1 x2: X)->(A x1).1->(A x2).1->(R x1 x2).1=c.2

setquotl0 (X : U) (R : eqrel X) (c : setquot X R.1) (x : carr X c.1)
  : Path (setquot X R.1) (setquotpr X R x.1) c
  = subtypeEquality (hsubtypes X) (iseqclass X R.1) p (setquotpr X R x.1) c rem where
  p (A : hsubtypes X) : isProp (iseqclass X R.1 A) = propiseqclass X R.1 A
  rem : Path (hsubtypes X) (setquotpr X R x.1).1 c.1 = <i> \(x : X) -> (rem' x) @ i -- inlined use of funext
    where rem' (a : X) : Path PROP ((setquotpr X R x.1).1 a) (c.1 a) =
            uahp' ((setquotpr X R x.1).1 a) (c.1 a) l2r r2l   -- This is where uahp appears
              where
              l2r (r : ((setquotpr X R x.1).1 a).1) : (c.1 a).1 = eqax1 X R.1 c.1 c.2 x.1 a r x.2
              r2l : (c.1 a).1 -> ((setquotpr X R x.1).1 a).1 = eqax2 X R.1 c.1 c.2 x.1 a x.2

setquotunivprop (X : U) (R : eqrel X) (P : setquot X R.1 -> PROP)
  (ps : (x : X) -> (P (setquotpr X R x)).1) (c : setquot X R.1) : (P c).1 = hinhuniv (carr X c.1) (P c) f rem
  where
   f (x : carr X c.1) : (P c).1 =
     let e : Path (setquot X R.1) (setquotpr X R x.1) c = setquotl0 X R c x
     in subst (setquot X R.1) (\(w : setquot X R.1) -> (P w).1) (setquotpr X R x.1) c e (ps x.1)
   rem : (ishinh (carr X c.1)).1 = eqax0 X R.1 c.1 c.2

setquotuniv2prop (X : U) (R : eqrel X) (P : setquot X R.1 -> setquot X R.1 -> PROP)
  (ps : (x x' : X) -> (P (setquotpr X R x) (setquotpr X R x')).1) (c c' : setquot X R.1) : (P c c').1 =
    setquotunivprop X R (\ (c0' : setquot X R.1) -> P c c0')
      (\ (x : X) -> setquotunivprop X R (\ (c0 : setquot X R.1) -> P c0 (setquotpr X R x))
                      (\ (x0 : X) -> ps x0 x) c) c'

setquotuniv3prop (X : U) (R : eqrel X)
    (P : setquot X R.1 -> setquot X R.1 -> setquot X R.1 -> PROP)
    (ps : (x0 x1 x2 : X) -> (P (setquotpr X R x0) (setquotpr X R x1) (setquotpr X R x2)).1)
    (q0 q1 q2 : setquot X R.1) : (P q0 q1 q2).1
  = setquotunivprop X R (P q0 q1)
    (\(x2' : X) -> setquotunivprop X R (\ (q1' : setquot X R.1) -> P q0 q1' (setquotpr X R x2'))
          (\(x1' : X) ->  setquotunivprop X R (\(q0' : setquot X R.1) -> P q0' (setquotpr X R x1')
              (setquotpr X R x2')) (\(x0' : X) -> ps x0' x1' x2') q0) q1) q2
