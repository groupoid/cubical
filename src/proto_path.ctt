{- Path Type:
   - Reflexivity, Symmetry, Composition, Kan;
   - Connections;
   - Congruence and Respect;
   - Contractability of Singletons;
   - Substitution, Transport, J.
   Copyright (c) Groupoid Infinity, 2014-2018. -}

module proto_path where

-- Path type and its eliminators
Path     (A: U) (a b: A): U = PathP (<i> A) a b
HPath  (A B: U) (a: A) (b: B) (P: Path U A B) : U = PathP P a b
refl     (A: U) (a: A): Path A a a = <i> a
singl    (A: U) (a: A): U = (x: A) * Path A a x
eta      (A: U) (a: A): singl A a = (a,refl A a)
contr    (A: U) (a b: A) (p: Path A a b): Path (singl A a) (eta A a) (b,p) = <i> (p @ i,<j> p @ i/\j)
sym      (A: U) (a b: A) (p: Path A a b): Path A b a = <i> p @ -i
cong   (A B: U) (f: A->B) (a b: A) (p: Path A a b): Path B (f a) (f b) = <i> f (p @ i)
ap       (A: U) (a x:A) (B:A->U) (f: A->B a) (b: B a) (p: Path A a x): Path (B a) (f a) (f x) = <i> f (p @ i)
trans  (A B: U) (p: Path U A B) (a : A): B = transport p a -- comp p a []
subst    (A: U) (P: A->U) (a b: A) (p: Path A a b) (e: P a): P b = comp (<i> P (p @ i)) e []
inv      (A: U) (a b: A) (p: Path A a b): Path A b a = <i> p @ -i
coerce (A B: U) (p: Path U A B): A -> B = \ (x: A) -> trans A B p x

-- Path induction from HoTT
J   (A: U) (a: A)
    (C: (x : A) -> Path A a x -> U)
    (d: C a (refl A a)) (x: A) (p: Path A a x): C x p
--  = comp  (<i> C (p @ i) (<j> p @ i /\ j)) d [] -- normal form
    = subst (singl A a) T (eta A a) (x, p) (contr A a x p) d
           where T (z : singl A a) : U = C (z.1) (z.2)

-- Computational Rules
trans_comp (A : U) (a : A) : Path A a (trans A A (<_> A) a) = fill (<_> A) a []
subst_comp (A : U) (P : A -> U) (a : A) (e : P a): Path (P a) e (subst A P a a (refl A a) e) = trans_comp (P a) e
J_comp     (A : U) (a : A) (C : (x : A) -> Path A a x -> U)
        (d : C a (refl A a)) : Path (C a (refl A a)) d (J A a C d a (refl A a))
      = subst_comp (singl A a) T (a, refl A a) d where
        T (z : singl A a) : U = C (z.1) (z.2)

symJ (A: U) (a b: A) (p: Path A a b): Path A b a
  = J A a T (refl A a) b p where T (x: A) (_: Path A a x): U = Path A x a

transJ (A: U) (a b c: A) (p: Path A a b) (q: Path A b c): Path A a c
  = undefined

composeUniv (A B C: U) (p: Path U A B) (q: Path U B C): Path U A C
    = comp (<i> Path U A (q @ i)) p []

-- composition operation
composition (A: U) (a b c: A) (p: Path A a b) (q: Path A b c): Path A a c
    = comp (<i> Path A a (q @ i)) p []
--  = subst A (Path A a) b c q p
--  = <i> comp (<j>A) (p @ i) [(i=0) -> <j> a, (i=1) -> q ]

compositionInv (A: U) (a b c: A) (p: Path A a b) (q: Path A b c): Path A c a
    = inv A a c (composition A a b c p q)

join (A: U) (a b: A) (p: Path A a b)
  : PathP (<x> Path A (p @ x) b) p (<_> b)
  = <y x> p @ (x \/ y)

meet (A: U) (a b: A) (p: Path A a b)
  : PathP (<x> Path A a (p @ x)) (<_> a) p
  = <x y> p @ (x /\ y)

app0 (A: U) (a b: A) (p: Path A a b): A = p @ 0
app1 (A: U) (a b: A) (p: Path A a b): A = p @ 1

-- Kan filling operation
kan (A: U) (a b c d: A) (p: Path A a b) (q: Path A a c) (r: Path A b d): Path A c d
    = <i> comp (<j>A) (p @ i) [(i=0) -> q, (i=1) -> r ]

kanOp (A: U) (a: A) (p: Path A a a) (b: A) (q: Path A a b)
  : Path A b b
  = kan A a a b b p q q

kanOpRefl (A: U) (a b: A) (q: Path A a b)
  : Path (Path A b b) (kanOp A a (refl A a) b q) (refl A b)
  = <j i> comp (refl U A) (q @ j) [ (i = 0) -> <k> q @ j \/ k,
                                    (i = 1) -> <k> q @ j \/ k,
                                    (j = 1) -> <k> b ]

transC    (A:U) (a:A) : A = comp (<_>A) a []
lemTransC (A:U) (a:A) : Path A (transC A a) a = <i>comp (<_>A) a [(i=1) -> <_>a]

compInv' (A:U) (a:A)
  : (x:A) (p:Path A a x)
 -> Path (Path A x x) (<_>x) (composition A x a x (<i>p@-i) p)
  = J A a (\  (x:A) (p:Path A a x)
 -> Path (Path A x x) (<_>x) (composition A x a x (<i>p@-i) p)) rem where
    rem : Path (Path A a a) (<_>a) (<i>comp (<_>A) a [(i=0) -> <_>a,
                                                      (i=1) -> <_>a])
        = <j i>comp (<_>A) a [(j=0) -> <_>a,
                              (i=0) -> <_>a,
                              (i=1) -> <_>a]

compInv (A:U) (a b:A) (q:Path A a b)
  : (x:A) (p:Path A b x)
 -> Path (Path A a b) q (composition A a x b (composition A a b x q p) (<i>p@-i))
  = J A b (\ (x:A) (p: Path A b x)
    -> Path (Path A a b) q (composition A a x b (composition A a b x q p) (<i>p@-i))) rem where
    rem : Path (Path A a b) q (<i>comp  (<_>A) (comp (<_>A)(q@i) [(i=0) -> <_>a,
                                                                  (i=1)-><_>b])
                                                                 [(i=0)-><_>a,
                                                                  (i=1)-><_>b])
        = <j i>comp (<_>A) (comp (<_>A)(q@i) [(j=0)-><_>q@i,
                                              (i=0)-><_>a,
                                              (i=1)-><_>b])
                                             [(j=0)-><_>q@i,
                                              (i=0)-><_>a,
                                              (i=1)-><_>b]

-- f o f^-1 = 1_a
compPathInv (A: U) (a b: A) (p: Path A a b) :
  Path (Path A a a) (composition A a b a p (<i> p @ -i)) (<_> a) =
    <k j> comp (<_>A) (p @ j /\ -k)
                    [ (j=0) -> <_> a,
                      (j=1) -> <i> p @ -i /\ -k,
                      (k=1) -> <_> a ]

-- f^-1 o f = 1_b
compInvPath (A: U) (a b: A) (p: Path A a b)
  : Path (Path A b b) (composition A b a b (<i> p @ -i) p)  (<_> b)
  = <j i> comp (<_>A) (p @ -i \/ j)
                    [ (i=0) -> <_> b,
                      (j=1) -> <_> b,
                      (i=1) -> <k> p @ j \/ k ]

-- Groupoid Interpretation

-- id_a o f = f
compPathL (A:U) (a b:A) (p: Path A a b)
  : Path (Path A a b) p (composition A a a b (<_>a) p)
  = <j i> comp (<_>A) a
                    [ (i=0) -> <_> a,
                      (i=1) -> p,
                      (j=0) -> <k>(p@i/\k) ]

-- f o id_b = f
compPathR (A:U) (a b:A) (p: Path A a b)
  : Path (Path A a b) p (composition A a b b p (<_>b))
  = <j i> comp (<_>A) (p@i)
                    [ (i=0) -> <_> a,
                      (i=1) -> <_>b,
                      (j=0) -> <_>(p@i) ]

compPathQ (A:U) (a b c d:A) (f: Path A a b) (g: Path A b c) (h: Path A c d)
        : Path (Path A a d) (composition A a c d (composition A a b c f g) h)
                            (composition A a b d f (composition A b c d g h)) = undefined
