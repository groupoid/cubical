{- Homology Theory:
   - Subgroups, Normal, Full;
   - Chain Complexes.
   - Ker, Im, B, Z, H;
   - Isomorphism theorems;
   - Homology Group.
   Copyright (c) Groupoid Infinity, 2016-2020. -}

module homology where
import int
import set
import algebra
import quotient
import iso_sigma
import subtype

diff (H: group) (g h: H.1.1) : H.1.1
  = (opGroup H) g ((invGroup H) h)

conjugate (G: group) (g1 g2: G.1.1): G.1.1
   = diff G ((opGroup G) g1 g2) g1

subtypeProp (A: U): U
  = (P : A -> U)
  * (a : A) -> isProp (P a)

subtype (A : U) (P : subtypeProp A): U
  = (x : A) -- prop
  * (P.1 x) -- level

subgroupProp (G: group): U
  = (prop: G.1.1 -> U)
  * (level: (x: G.1.1) -> isProp (prop x))
  * (ident: prop (idGroup G))
  * (inv: (g: G.1.1) -> prop g -> prop ((invGroup G) g))
  * ((g1 g2: G.1.1) -> prop g1 -> prop g2 -> prop ((opGroup G) g1 g2))

-- Accessors
subgroupLevel (G : group) (P : subgroupProp G) : (x : G.1.1) -> isProp (P.1 x) = P.2.1
subgroupId    (G : group) (P : subgroupProp G) : P.1 (idGroup G) = P.2.2.1
subgroupInv   (G : group) (P : subgroupProp G) : (g: G.1.1) -> P.1 g -> P.1 ((invGroup G) g)
  = P.2.2.2.1
subgroupOp (G : group) (P : subgroupProp G) :
  (g1 g2: G.1.1) -> P.1 g1 -> P.1 g2 -> P.1 ((opGroup G) g1 g2)
  = P.2.2.2.2

subgroupPropDiff (G : group) (P : subgroupProp G) (g1 g2 : G.1.1)
  (u : P.1 g1) (v : P.1 g2) : P.1 (diff G g1 g2)
  = subgroupOp G P g1 ((invGroup G) g2) u (subgroupInv G P g2 v)

subgroupSelfDiff (G : group) (P : subgroupProp G) (g : G.1.1) : P.1 (diff G g g)
  = transport (<i> P.1 ((hasInvGroup G).2 g @ -i)) (subgroupId G P)

isNormal (G: group) (P: subgroupProp G) : U
  = (X: group)
  * (g1 g2: G.1.1) -> P.1 g2 -> P.1 (conjugate G g1 g2)

isFull (G: group) (P: subgroupProp G): U
  = (g: G.1.1) -> P.1 g

normalSubgroupProp (G: group): U
  = (P: subgroupProp G)
  * isNormal G P

subElProp (G: group) (P: subgroupProp G)
  : subtypeProp G.1.1
  = (P.1,P.2.1)

subEl (G: group) (P: subgroupProp G): U
  = subtype G.1.1 (subElProp G P)

isSetSubEl (G: group) (P: subgroupProp G): isSet (subEl G P)
  = setSig G.1.1 P.1 G.1.2 (\(x : G.1.1) -> propSet (P.1 x) (P.2.1 x))

isGroupHom (G H: group) (f: G.1.1 -> H.1.1): U
  = (g1 g2: G.1.1) -> Path H.1.1 (f ((opGroup G) g1 g2)) ((opGroup H) (f g1) (f g2))

isGroupKer (G H: group) (f: G.1.1 -> H.1.1) (x: G.1.1): U
  = Path H.1.1 (f x) (idGroup H)

isGroupIm (G H: group) (f: G.1.1 -> H.1.1) (g: H.1.1): U
  = pTrunc (fiber G.1.1 H.1.1 f g)

subgroup (G: group) (P: subgroupProp G): group
  = ((subEl G P, isSetSubEl G P), ((op, assoc, id, (lx, rx)), inv, (li, ri))) where
    un: U = subEl G P
    op (x y: un): un = ((opGroup G) x.1 y.1, subgroupOp G P x.1 y.1 x.2 y.2)
    unPath (x y : un) (p : Path G.1.1 x.1 y.1) : Path un x y =
      subtypeEquality G.1.1 P.1 P.2.1 x y p
    assoc: isAssociative un op =
      \(x y z : un) -> unPath (op x (op y z)) (op (op x y) z) ((isAssocGroup G) x.1 y.1 z.1)
    id: un = ((idGroup G), subgroupId G P)
    lx (x: un): Path un (op id x) x = unPath (op id x) x ((hasIdGroup G).1 x.1)
    rx (x: un): Path un (op x id) x = unPath (op x id) x ((hasIdGroup G).2 x.1)
    inv (x: un): un = ((invGroup G) x.1, subgroupInv G P x.1 x.2)
    li (x: un) : Path un (op (inv x) x) id =
      unPath (op (inv x) x) id ((hasInvGroup G).1 x.1)
    ri (x: un) : Path un (op x (inv x)) id =
      unPath (op x (inv x)) id ((hasInvGroup G).2 x.1)

kerProp (G H: group) (phi: grouphom G H)
  : subgroupProp G
  = (prop,level,ident,inv,op) where
    prop (x: G.1.1): U = isGroupKer G H phi.1 x
    ident: prop (idGroup G) = phi.2.2
    level (x: G.1.1): isProp (prop x) = \(p q: prop x) -> H.1.2 (phi.1 x) (idGroup H) p q
    inv (x: G.1.1) (p : prop x) : prop ((invGroup G) x) =
      <i> comp (<_> H.1.1) ((invGroup H) (p @ i))
               [ (i = 0) -> <j> lem_grouphom_inv G H phi x @ -j
               , (i = 1) -> lemma_group_inv_id H ]
    op (g1 g2: G.1.1) (p : prop g1) (q : prop g2) : prop ((opGroup G) g1 g2) =
      <i> comp (<_> H.1.1) ((opGroup H) (p @ i) (q @ i))
               [ (i = 0) -> <j> phi.2.1 g1 g2 @ -j
               , (i = 1) -> (hasIdGroup H).1 (idGroup H) ]

imProp (G H: group) (phi: grouphom G H)
  : subgroupProp H
  = (prop, level, ident, inv, op) where
    prop (x: H.1.1): U = isGroupIm G H phi.1 x
    ident: prop (idGroup H) = inc ((idGroup G), <i> phi.2.2 @ -i)
    level (x: H.1.1): isProp (prop x) = pTruncIsProp (fiber G.1.1 H.1.1 phi.1 x)
    fib (x : H.1.1) : U = fiber G.1.1 H.1.1 phi.1 x
    inv (x: H.1.1) : prop x -> prop ((invGroup H) x) =
      pTruncLift (fib x) (fib ((invGroup H) x))
        (\(u : fib x) ->
          ((invGroup G) u.1,
           <i> comp (<_> H.1.1) ((invGroup H) (u.2 @ i))
                    [ (i = 0) -> <_> (invGroup H) x
                    , (i = 1) -> <j> lem_grouphom_inv G H phi u.1 @ -j ]))
    op (g1 g2: H.1.1) : prop g1 -> prop g2 -> prop ((opGroup H) g1 g2) =
      pTruncBinLift (fib g1) (fib g2) (fib ((opGroup H) g1 g2))
        (\(u : fib g1) (v : fib g2) ->
          ((opGroup G) u.1 v.1,
           <i> comp (<_> H.1.1) (phi.2.1 u.1 v.1 @ -i)
                    [ (i = 0) -> <j> (opGroup H) (u.2 @ -j) (v.2 @ -j)
                    , (i = 1) -> <_> phi.1 ((opGroup G) u.1 v.1) ]))

kerGroup (G: group) (H: group) (phi: grouphom G H): group
  = subgroup G (kerProp G H phi)

imGroup (G: group) (H: group) (psi: grouphom G H): group
  = subgroup H (imProp G H psi)

relKerIm (G H: group) (phi: grouphom G H) (x y: H.1.1): U
  = pTrunc (fiber G.1.1 H.1.1 phi.1 (diff H x y))

elKerIm (G H: group) (phi: grouphom G H): U
  = quot H.1.1 (relKerIm G H phi)

mutual
  data Seq (A: U) (B: A -> A -> U)
     = seqNil (ob: A)
     | seqCons (ob: A) (seq: Seq A B) (hom: B ob (head A B seq))
  head (A: U) (B: A -> A -> U): Seq A B -> A = split
     seqNil x -> x
     seqCons x y z -> x

ChainComplex: U
  = (sequence: Seq abgroup abgrouphom)
  * (index: nat -> abgroup)
  * (augment: abgrouphom (index zero) (head abgroup abgrouphom sequence))
  * ((n: nat) -> abgrouphom (index (succ n)) (index n))

CochainComplex: U
  = (sequence: Seq abgroup abgrouphom)
  * (index: nat -> abgroup)
  * (augment: abgrouphom (head abgroup abgrouphom sequence) (index zero))
  * ((n: nat) -> abgrouphom (index n) (index (succ n)))

-- Theorems

--                       phiUnfold
--   φ (g1 * g2 * g1⁻¹) - - - - - - > φ g1 * φ g2 * (φ g1)⁻¹
--            ^                               ^
--            |                               |
--            |                               |
--            |                               |
-- φ (g1 * g2) * φ g1⁻¹ ------------> φ g1 * φ g2 * φ g1⁻¹

phiUnfold (G H : group) (phi : grouphom G H) (g1 g2 : G.1.1) :
  Path H.1.1 (phi.1 (conjugate G g1 g2)) ((opGroup H) ((opGroup H) (phi.1 g1) (phi.1 g2)) ((invGroup H) (phi.1 g1))) =
  <i> comp (<_> H.1.1) ((opGroup H) (phi.2.1 g1 g2 @ i) (phi.1 ((invGroup G) g1)))
           [ (i = 0) -> <j> phi.2.1 ((opGroup G) g1 g2) ((invGroup G) g1) @ -j
           , (i = 1) -> <j> ((opGroup H) ((opGroup H) (phi.1 g1) (phi.1 g2)) (lem_grouphom_inv G H phi g1 @ j)) ]

--                          conjOne
-- φ g1 * φ g2 * (φ g1)⁻¹ - - - - - - > 1
--         ^                            ^
--         |                            |
--         |                            |
--         |                            |
--  φ g1 * 1 * (φ g1)⁻¹  --------> φ g1 * (φ g1)⁻¹

conjOne (G H : group) (phi : grouphom G H) (g1 g2 : G.1.1) (p : Path H.1.1 (phi.1 g2) (idGroup H)) :
  Path H.1.1 ((opGroup H) ((opGroup H) (phi.1 g1) (phi.1 g2)) ((invGroup H) (phi.1 g1))) (idGroup H) =
  <i> comp (<_> H.1.1) ((opGroup H) ((hasIdGroup H).2 (phi.1 g1) @ i) ((invGroup H) (phi.1 g1)))
           [ (i = 0) -> <j> (opGroup H) ((opGroup H) (phi.1 g1) (p @ -j)) ((invGroup H) (phi.1 g1))
           , (i = 1) -> (hasInvGroup H).2 (phi.1 g1) ]

kernelIsNormalSubgroup (G H : group) (phi : grouphom G H)
  : normalSubgroupProp G
  = (ker, cond) where
    ker: subgroupProp G = kerProp G H phi
    phiConj (g1 g2: G.1.1) (p : Path H.1.1 (phi.1 g2) (idGroup H)) :
      Path H.1.1 (phi.1 (conjugate G g1 g2)) (idGroup H)
      = <i> comp (<_> H.1.1) (conjOne G H phi g1 g2 p @ i)
                 [ (i = 0) -> <j> phiUnfold G H phi g1 g2 @ -j
                 , (i = 1) -> <_> idGroup H ]
    cond: isNormal G ker = (G, phiConj)

normalSubgroupLem (G : group) (P : normalSubgroupProp G)
  (a b : G.1.1) (p : P.1.1 (diff G a b)) : P.1.1 (opGroup G (invGroup G a) b)
  = undefined -- TODO

factorProp (G : group) (P : normalSubgroupProp G) : G.1.1 -> G.1.1 -> U
  = \(x y : G.1.1) -> P.1.1 (diff G x y)

factor (G : group) (P : normalSubgroupProp G) : U
  = setquot G.1.1 (factorProp G P)

factorIncl (G : group) (P : normalSubgroupProp G) (x : G.1.1) : factor G P
  = quotient x

factorMul (G : group) (P : normalSubgroupProp G) : factor G P -> factor G P -> factor G P
  = setquotLift2 G.1.1 G.1.1 (factor G P) (factorProp G P) (factorProp G P)
    (subgroupSelfDiff G P.1) (subgroupSelfDiff G P.1)
    (setquotIsSet G.1.1 (factorProp G P))
    (\(a b : G.1.1) -> factorIncl G P (op a b))
    (\(a1 b1 a2 b2 : G.1.1) (p : P.1.1 (diff G a1 b1)) (q : P.1.1 (diff G a2 b2)) ->
      setquotId G.1.1 (factorProp G P) (op a1 a2) (op b1 b2)
        transport (<i> P.1.1 (lem6 a1 b1 a2 b2 @ -i))
                  (P.2.2 b1 (op (inv (op (inv a1) b1)) (op a2 (inv b2)))
                    (subgroupOp G P.1 (inv (op (inv a1) b1)) (diff G a2 b2)
                      (subgroupInv G P.1 (op (inv a1) b1)
                        (normalSubgroupLem G P a1 b1 p)) q)))
  where
    --   ((a1 * a2) * (b1 * b2)⁻¹)                    (A)
    -- = ((a1 * a2) * (b2⁻¹ * b1⁻¹))                     
    -- = 1 * ((a1 * a2) * (b2⁻¹ * b1⁻¹))                 
    -- = (b1 * b1⁻¹) * ((a1 * a2) * (b2⁻¹ * b1⁻¹))    (B)
    -- = b1 * (b1⁻¹ * ((a1 * a2) * (b2⁻¹ * b1⁻¹)))       
    -- = b1 * (b1⁻¹ * (((a1 * a2) * b2⁻¹) * b1⁻¹))       
    -- = b1 * ((b1⁻¹ * ((a1 * a2) * b2⁻¹)) * b1⁻¹)    (C)
    -- = b1 * (((b1⁻¹ * (a1 * a2)) * b2⁻¹) * b1⁻¹)       
    -- = b1 * ((((b1⁻¹ * a1) * a2) * b2⁻¹) * b1⁻¹)       
    -- = b1 * (((b1⁻¹ * a1) * (a2 * b2⁻¹)) * b1⁻¹)    (D)
    -- = b1 * (((b1⁻¹ * a1⁻¹⁻¹) * (a2 * b2⁻¹)) * b1⁻¹)   
    -- = b1 * (((a1⁻¹ * b1)⁻¹ * (a2 * b2⁻¹)) * b1⁻¹)  (E)
    -- = (b1 * ((a1⁻¹ * b1)⁻¹ * (a2 * b2⁻¹))) * b1⁻¹  (F)
    op (a b : G.1.1) : G.1.1 = opGroup G a b
    inv (a : G.1.1) : G.1.1 = invGroup G a
    A (a1 b1 a2 b2 : G.1.1) : G.1.1
      = diff G (op a1 a2) (op b1 b2)
    B (a1 b1 a2 b2 : G.1.1) : G.1.1
      = op (diff G b1 b1) (op (op a1 a2) (op (inv b2) (inv b1)))
    C (a1 b1 a2 b2 : G.1.1) : G.1.1
      = op b1 (op (op (inv b1) (op (op a1 a2) (inv b2))) (inv b1))
    D (a1 b1 a2 b2 : G.1.1) : G.1.1
      = op b1 (op (op (op (inv b1) a1) (op a2 (inv b2))) (inv b1))
    E (a1 b1 a2 b2 : G.1.1) : G.1.1
      = op b1 (op (op (inv (op (inv a1) b1)) (op a2 (inv b2))) (inv b1))
    F (a1 b1 a2 b2 : G.1.1) : G.1.1
      = op (op b1 (op (inv (op (inv a1) b1)) (op a2 (inv b2)))) (inv b1)
    lem1 (a1 b1 a2 b2 : G.1.1) : Path G.1.1 (A a1 b1 a2 b2) (B a1 b1 a2 b2)
      = <i> comp (<_> G.1.1) ((hasIdGroup G).1 (op (op a1 a2) (op (inv b2) (inv b1))) @ -i)
                 [ (i = 0) -> <j> op (op a1 a2) (lem_group_inv_dist G b1 b2 @ -j)
                 , (i = 1) -> <j> op ((hasInvGroup G).2 b1 @ -j)
                                     (op (op a1 a2) (op (inv b2) (inv b1))) ]
    lem2 (a1 b1 a2 b2 : G.1.1) : Path G.1.1 (B a1 b1 a2 b2) (C a1 b1 a2 b2)
      = <i> comp (<_> G.1.1) (op b1 (op (inv b1) (isAssocGroup G (op a1 a2) (inv b2) (inv b1) @ i)))
                 [ (i = 0) -> isAssocGroup G b1 (inv b1) (op (op a1 a2) (op (inv b2) (inv b1)))
                 , (i = 1) -> <j> op b1 (isAssocGroup G (inv b1) (op (op a1 a2) (inv b2)) (inv b1) @ j) ]
    lem3 (a1 b1 a2 b2 : G.1.1) : Path G.1.1 (C a1 b1 a2 b2) (D a1 b1 a2 b2)
      = <i> comp (<_> G.1.1) (op b1 (op (op (isAssocGroup G (inv b1) a1 a2 @ i) (inv b2)) (inv b1)))
                 [ (i = 0) -> <j> op b1 (op (isAssocGroup G (inv b1) (op a1 a2) (inv b2) @ -j) (inv b1))
                 , (i = 1) -> <j> op b1 (op (isAssocGroup G (op (inv b1) a1) a2 (inv b2) @ -j) (inv b1)) ]
    lem4 (a1 b1 a2 b2 : G.1.1) : Path G.1.1 (D a1 b1 a2 b2) (A a1 b1 a2 b2)
      = <i> comp (<_> G.1.1) (lem2 a1 b1 a2 b2 @ -i)
                 [ (i = 0) -> lem3 a1 b1 a2 b2
                 , (i = 1) -> <j> lem1 a1 b1 a2 b2 @ -j ]
    lem5 (a1 b1 a2 b2 : G.1.1) : Path G.1.1 (A a1 b1 a2 b2) (E a1 b1 a2 b2)
      = <i> comp (<_> G.1.1) (op b1 (op (op (op (inv b1) (invInvGroup G a1 @ -i))
                                            (op a2 (inv b2))) (inv b1)))
                 [ (i = 0) -> lem4 a1 b1 a2 b2
                 , (i = 1) -> <j> op b1 (op (op (lem_group_inv_dist G (inv a1) b1 @ -j)
                                                (op a2 (inv b2))) (inv b1)) ]
    lem6 (a1 b1 a2 b2 : G.1.1) : Path G.1.1 (A a1 b1 a2 b2) (F a1 b1 a2 b2)
      = <i> comp (<_> G.1.1) (isAssocGroup G b1 (op (inv (op (inv a1) b1)) (op a2 (inv b2))) (inv b1) @ i)
                 [ (i = 0) -> <j> lem5 a1 b1 a2 b2 @ -j
                 , (i = 1) -> <_> F a1 b1 a2 b2 ]