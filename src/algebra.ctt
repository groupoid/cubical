{- Abstract Algbera:
   - Monoid and CMonoid;
   - Group and AbGroup;
   - Ring and AbRing;
   - Hom sequence;
   - Presheaf Type Theory.
   Copyright (c) Groupoid Infinity, 2017-1018.

   HoTT 6.11 Algebra -}

-- Original Author: Linus BÃ¶rjesson.

module algebra where
import pi
import prop

isAssociative (M: U) (op: M -> M -> M): U
  = (a b c: M) -> Path M (op a (op b c)) (op (op a b) c)

propisAssociative (M: U) (sM: isSet M) (op: M -> M -> M)
  : isProp (isAssociative M op)
  = propPi3 M B h where
    B (a b c: M): U = Path M (op a (op b c)) (op (op a b) c)
    h (a b c: M): isProp (B a b c) = sM (op a (op b c)) (op (op a b) c)

hasLeftIdentity (M: U) (op: M -> M -> M) (id: M): U
  = (x: M) -> Path M (op id x) x

prophasLeftIdentity (M: U) (sM: isSet M) (op: M -> M -> M) (id: M)
  : isProp (hasLeftIdentity M op id)
  = propPi M B h where
    B (x: M): U = Path M (op id x) x
    h (x: M): isProp (B x) = sM (op id x) x

hasRightIdentity (M: U) (op: M -> M -> M) (id: M): U
  = (x: M) -> Path M (op x id) x

prophasRightIdentity (M: U) (sM: isSet M) (op: M -> M -> M) (id: M)
  : isProp (hasRightIdentity M op id)
  = propPi M B h where
    B (x: M): U = Path M (op x id) x
    h (x: M): isProp (B x) = sM (op x id) x

hasIdentity (M: U) (op: M -> M -> M) (id: M): U
  = (_: hasLeftIdentity M op id)
  * (hasRightIdentity M op id)

prophasIdentity (M: U) (sM: isSet M) (op: M -> M -> M) (id: M)
  : isProp (hasIdentity M op id)
  = propAnd (hasLeftIdentity M op id)
            (hasRightIdentity M op id)
            (prophasLeftIdentity M sM op id)
            (prophasRightIdentity M sM op id)

isCommutative (M: U) (opx: M -> M -> M): U
  = (x y: M) -> Path M (opx x y) (opx y x)

propisCommutative (M: U) (sM: isSet M) (opx: M -> M -> M)
  : isProp (isCommutative M opx)
  = propPi2 M B h where
    B (x y: M): U = Path M (opx x y) (opx y x)
    h (x y: M): isProp (B x y) = sM (opx x y) (opx y x)

isLeftCancellative (M: U) (opx: M -> M -> M): U
  = (c x y: M) -> Path M (opx c x) (opx c y) -> Path M x y

propisLeftCancellative (M: U) (sM: isSet M) (op: M -> M -> M)
  : isProp (isLeftCancellative M op)
  = propPi3 M B h where
    B0 (c x y: M) (p: Path M (op c x) (op c y)): U = Path M x y
    h0 (c x y: M) (p: Path M (op c x) (op c y)): isProp (B0 c x y p) = sM x y
    B  (c x y: M): U = Path M (op c x) (op c y) -> Path M x y
    h  (c x y: M): isProp (B c x y) = propPi (Path M (op c x) (op c y)) (B0 c x y) (h0 c x y)

isRightCancellative (M: U) (op: M -> M -> M): U
  = (c x y: M) -> Path M (op x c) (op y c) -> Path M x y

propisRightCancellative (M: U) (sM: isSet M) (op: M -> M -> M)
  : isProp (isRightCancellative M op)
  = propPi3 M B h where
    B0 (c x y: M) (p: Path M (op x c) (op y c)): U = Path M x y
    h0 (c x y: M) (p: Path M (op x c) (op y c)): isProp (B0 c x y p) = sM x y
    B  (c x y: M): U = Path M (op x c) (op y c) -> Path M x y
    h  (c x y: M): isProp (B c x y) = propPi (Path M (op x c) (op y c)) (B0 c x y) (h0 c x y)

isCancellative (M: U) (op: M -> M -> M): U
  = (_: isLeftCancellative M op)
  * (isRightCancellative M op)

propisCancellative (M: U) (sM: isSet M) (op: M -> M -> M)
  : isProp (isCancellative M op)
  = propAnd (isLeftCancellative M op)
            (isRightCancellative M op)
            (propisLeftCancellative M sM op)
            (propisRightCancellative M sM op)

hasLeftInverse (G: U) (op: G -> G -> G) (id: G) (inv: G -> G): U
  = (x: G) -> Path G (op (inv x) x) id

prophasLeftInverse (G: U) (sG: isSet G) (op: G -> G -> G) (id: G) (inv: G -> G)
  : isProp (hasLeftInverse G op id inv)
  = propPi G B h where
    B (x: G): U = Path G (op (inv x) x) id
    h (x: G): isProp (B x) = sG (op (inv x) x) id

hasRightInverse (G: U) (op: G -> G -> G) (id: G) (inv: G -> G): U
  = (x: G) -> Path G (op x (inv x)) id

prophasRightInverse (G: U) (sG: isSet G) (op: G -> G -> G) (id: G) (inv: G -> G)
  : isProp (hasRightInverse G op id inv)
  = propPi G B h where
    B (x: G): U = Path G (op x (inv x)) id
    h (x: G): isProp (B x) = sG (op x (inv x)) id

hasInverse (G: U) (op: G -> G -> G) (id: G) (inv: G -> G): U
  = (_: hasLeftInverse G op id inv)
  * (hasRightInverse G op id inv)

prophasInverse (G: U) (sG: isSet G) (op: G -> G -> G) (id: G) (inv: G -> G)
  : isProp (hasInverse G op id inv)
  = propAnd (hasLeftInverse G op id inv)
            (hasRightInverse G op id inv)
            (prophasLeftInverse G sG op id inv)
            (prophasRightInverse G sG op id inv)

isLeftDistributive (R: U) (add: R -> R -> R) (mul: R -> R -> R): U
  = (a b c: R) -> Path R (mul a (add b c)) (add (mul a b) (mul a c))

propisLeftDistributive (R: U) (sR: isSet R) (add: R -> R -> R) (mul: R -> R -> R)
  : isProp (isLeftDistributive R add mul)
  = propPi3 R B h where
    B (a b c: R): U = Path R (mul a (add b c)) (add (mul a b) (mul a c))
    h (a b c: R): isProp (B a b c) = sR (mul a (add b c)) (add (mul a b) (mul a c))

isRightDistributive (R: U) (add: R -> R -> R) (mul: R -> R -> R): U
  = (a b c: R) -> Path R (mul (add b c) a) (add (mul b a) (mul c a))

propisRightDistributive (R: U) (sR: isSet R) (add: R -> R -> R) (mul: R -> R -> R)
  : isProp (isRightDistributive R add mul)
  = propPi3 R B h where
    B (a b c: R): U = Path R (mul (add b c) a) (add (mul b a) (mul c a))
    h (a b c: R): isProp (B a b c) = sR (mul (add b c) a) (add (mul b a) (mul c a))

isDistributive (R: U) (add: R -> R -> R) (mul: R -> R -> R): U
  = (_: isLeftDistributive R add mul)
  * (isRightDistributive R add mul)

propisDistributive (R: U) (sR: isSet R) (add: R -> R -> R) (mul: R -> R -> R)
  : isProp (isDistributive R add mul)
  = propAnd (isLeftDistributive R add mul)
            (isRightDistributive R add mul)
            (propisLeftDistributive R sR add mul)
            (propisRightDistributive R sR add mul)

preservesOp (A B: U) (oA: A -> A -> A) (oB: B -> B -> B) (f: A -> B): U
  = (a0 a1: A) -> Path B (f (oA a0 a1)) (oB (f a0) (f a1))

proppreservesOp (A B: U) (sB: isSet B) (oA: A -> A -> A) (oB: B -> B -> B)
    (f: A -> B): isProp (preservesOp A B oA oB f)
  = propPi2 A (\(a0 a1: A) -> Path B (f (oA a0 a1)) (oB (f a0) (f a1)))
              (\(a0 a1: A) -> sB (f (oA a0 a1)) (oB (f a0) (f a1)))

preservesId (A B: U) (iA: A) (iB: B) (f: A -> B): U
  = Path B (f iA) iB

proppreservesId (A B: U) (sB: isSet B) (iA: A) (iB: B) (f: A -> B)
  : isProp (preservesId A B iA iB f)
  = sB (f iA) iB

-- Structures

isMonoid (M: SET): U
  = (op: M.1 -> M.1 -> M.1)
  * (assoc: isAssociative M.1 op)
  * (id: M.1)
  * (hasIdentity M.1 op id)

isCMonoid (M: SET): U
  = (m: isMonoid M)
  * (isCommutative M.1 m.1)

isGroup (G: SET): U
  = (m: isMonoid G)
  * (inv: G.1 -> G.1)
  * (hasInverse G.1 m.1 m.2.2.1 inv)

isAbGroup (G: SET): U
  = (g: isGroup G)
  * (isCommutative G.1 g.1.1)

isDifferentialGroup (G: SET): U
  = (g: isGroup G)
  * (comm: isCommutative G.1 g.1.1)
  * (boundary: G.1 -> G.1)
  * ((x: G.1) -> Path G.1 (boundary (boundary x)) g.1.2.2.1)

isRing (R: SET): U
  = (mul: isMonoid R)
  * (add: isAbGroup R)
  * (isDistributive R.1 add.1.1.1 mul.1)

isAbRing (R: SET): U
  = (mul: isCMonoid R)
  * (add: isAbGroup R)
  * (isDistributive R.1 add.1.1.1 mul.1.1)

monoid:  U = (X: SET) * isMonoid X
cmonoid: U = (X: SET) * isCMonoid X
group:   U = (X: SET) * isGroup X
abgroup: U = (X: SET) * isAbGroup X
ring:    U = (X: SET) * isRing X
abring:  U = (X: SET) * isAbRing X


-- Accessors
opMonoid       (m: monoid): m.1.1 -> m.1.1 -> m.1.1 = m.2.1
isAssocMonoid  (m: monoid): isAssociative m.1.1 (opMonoid m) = m.2.2.1
idMonoid       (m: monoid): m.1.1 = m.2.2.2.1
hasIdMonoid    (m: monoid): hasIdentity m.1.1 (opMonoid m) (idMonoid m) = m.2.2.2.2

-- Commutative monoids
opCMonoid      (m: cmonoid): m.1.1 -> m.1.1 -> m.1.1 = m.2.1.1
isAssocCMonoid (m: cmonoid): isAssociative m.1.1 (opCMonoid m) = m.2.1.2.1
idCMonoid      (m: cmonoid): m.1.1 = m.2.1.2.2.1
hasIdCMonoid   (m: cmonoid): hasIdentity m.1.1 (opCMonoid m) (idCMonoid m) = m.2.1.2.2.2
isCommCMonoid  (m: cmonoid): isCommutative m.1.1 (opCMonoid m) = m.2.2

-- Groups
opGroup       (g: group): g.1.1 -> g.1.1 -> g.1.1 = g.2.1.1
isAssocGroup  (g: group): isAssociative g.1.1 (opGroup g) = g.2.1.2.1
idGroup       (g: group): g.1.1 = g.2.1.2.2.1
hasIdGroup    (g: group): hasIdentity g.1.1 (opGroup g) (idGroup g) = g.2.1.2.2.2
invGroup      (g: group): g.1.1 -> g.1.1 = g.2.2.1
hasInvGroup   (g: group): hasInverse g.1.1 (opGroup g) (idGroup g) (invGroup g) = g.2.2.2

-- Commutative groups
opCGroup      (g: abgroup): g.1.1 -> g.1.1 -> g.1.1 = g.2.1.1.1
isAssocCGroup (g: abgroup): isAssociative g.1.1 (opCGroup g) = g.2.1.1.2.1
idCGroup      (g: abgroup): g.1.1 = g.2.1.1.2.2.1
hasIdCGroup   (g: abgroup): hasIdentity g.1.1 (opCGroup g) (idCGroup g) = g.2.1.1.2.2.2
isCommCGroup  (g: abgroup): isCommutative g.1.1 (opCGroup g) = g.2.2
invCGroup     (g: abgroup): g.1.1 -> g.1.1 = g.2.1.2.1
hasInvCGroup  (g: abgroup): hasInverse g.1.1 (opCGroup g) (idCGroup g) (invCGroup g) = g.2.1.2.2

-- Groups are cancellative
lem_group_lcancellative (g: group)
                        (c x y: g.1.1)
                        (p: Path g.1.1 (opGroup g c x) (opGroup g c y)): Path g.1.1 x y
  = <i> comp (<_> g.1.1) (opGroup g (invGroup g c) (p @ i))
             [(i=0) -> <j> comp (<_> g.1.1) (opGroup g ((hasInvGroup g).1 c @ j) x)
                                [(j=0) -> <k> isAssocGroup g (invGroup g c) c x @ -k,
                                 (j=1) -> (hasIdGroup g).1 x ],
              (i=1) -> <j> comp (<_> g.1.1) (opGroup g ((hasInvGroup g).1 c @ j) y)
                                [(j=0) -> <k> isAssocGroup g (invGroup g c) c y @ -k,
                                 (j=1) -> (hasIdGroup g).1 y ] ]

lem_group_rcancellative (g: group) (c x y: g.1.1) (p: Path g.1.1 (opGroup g x c) (opGroup g y c))
  : Path g.1.1 x y
  = <i> comp (<_> g.1.1) (opGroup g (p @ i) (invGroup g c))
    [ (i = 0) -> <j> comp (<_> g.1.1) (opGroup g x ((hasInvGroup g).2 c @ j))
        [ (j = 0) -> isAssocGroup g x c (invGroup g c)
        , (j = 1) -> (hasIdGroup g).2 x ]
    , (i = 1) -> <j> comp (<_> g.1.1) (opGroup g y ((hasInvGroup g).2 c @ j))
        [ (j = 0) -> isAssocGroup g y c (invGroup g c)
        , (j = 1) -> (hasIdGroup g).2 y ] ]

lem_group_cancellative (g: group)
  : isCancellative g.1.1 (opGroup g)
  = (lem_group_lcancellative g, lem_group_rcancellative g)

-- (a Â· b)â»Â¹ â¡ aâ»Â¹ Â· bâ»Â¹
lem_cgroup_inv_dist (g: abgroup) (a b: g.1.1)
  : Path g.1.1 (opCGroup g (invCGroup g a) (invCGroup g b)) (invCGroup g (opCGroup g a b))
  = let
    a': g.1.1 = invCGroup g a
    b': g.1.1 = invCGroup g b
    x: g.1.1 = opCGroup g a b
    x': g.1.1 = invCGroup g (opCGroup g a b)
    p0: Path g.1.1 (opCGroup g x' a) b'
      = <i> comp (<_> g.1.1) (opCGroup g ((hasInvCGroup g).1 (opCGroup g a b) @ i) b')
        [ (i = 1) -> (hasIdCGroup g).1 b'
        , (i = 0) -> <j> comp (<_> g.1.1) (isAssocCGroup g x' x b' @ -j)
          [ (j = 0) -> <_> opCGroup g (opCGroup g x' x) b'
          , (j = 1) -> <k> comp (<_> g.1.1) (opCGroup g x' (isAssocCGroup g a b b' @ -k))
            [ (k = 0) -> <_> opCGroup g x' (opCGroup g x b')
            , (k = 1) -> <l> comp (<_> g.1.1)
                              (opCGroup g x' (opCGroup g a ((hasInvCGroup g).2 b @ l)))
              [ (l = 0) -> <_> opCGroup g x' (opCGroup g a (opCGroup g b b'))
              , (l = 1) -> <m> opCGroup g x' ((hasIdCGroup g).2 a @ m) ]]]]
    p1: Path g.1.1 x' (opCGroup g b' a')
      = <i> comp (<_> g.1.1) (opCGroup g (p0 @ i) a')
        [ (i = 1) -> <_> opCGroup g b' a'
        , (i = 0) -> <j> comp (<_> g.1.1) (isAssocCGroup g x' a a' @ -j)
          [ (j = 0) -> <_> opCGroup g (opCGroup g x' a) a'
          , (j = 1) -> <k> comp (<_> g.1.1) (opCGroup g x' ((hasInvCGroup g).2 a @ k))
            [ (k = 0) -> <_> opCGroup g x' (opCGroup g a a')
            , (k = 1) -> (hasIdCGroup g).2 x' ]]]
  in <i> comp (<_> g.1.1) (p1 @ -i)
    [ (i = 0) -> isCommCGroup g (invCGroup g b) (invCGroup g a)
    , (i = 1) -> <_> invCGroup g (opCGroup g a b) ]

-- eâ»Â¹ â¡ e
lemma_cgroup_inv_id (g: abgroup)
  : Path g.1.1 (invCGroup g (idCGroup g)) (idCGroup g)
  = <i> comp (<_> g.1.1) ((hasIdCGroup g).2 (invCGroup g (idCGroup g)) @ -i)
    [ (i = 0) -> <_> invCGroup g (idCGroup g)
    , (i = 1) -> (hasInvCGroup g).1 (idCGroup g) ]

-- Homomorphisms

-- The monoid homomorphism preserves both the structure and the identity element
ismonoidhom (a b: monoid) (f: a.1.1 -> b.1.1): U
  = (_: preservesOp a.1.1 b.1.1 (opMonoid a) (opMonoid b) f)
  * (preservesId a.1.1 b.1.1 (idMonoid a) (idMonoid b) f)

propismonoidhom (a b: monoid) (f: a.1.1 -> b.1.1)
  : isProp (ismonoidhom a b f)
  = propAnd (preservesOp a.1.1 b.1.1 (opMonoid a) (opMonoid b) f)
            (preservesId a.1.1 b.1.1 (idMonoid a) (idMonoid b) f)
            (proppreservesOp a.1.1 b.1.1 b.1.2 (opMonoid a) (opMonoid b) f)
            (proppreservesId a.1.1 b.1.1 b.1.2 (idMonoid a) (idMonoid b) f)

monoidhom (a b: monoid): U
  = (f: a.1.1 -> b.1.1)
  * (ismonoidhom a b f)

-- Homomorphisms between underlying monoids
cmonoidhom  (a b: cmonoid): U = monoidhom (a.1, a.2.1)   (b.1, b.2.1)
grouphom    (a b: group):   U = monoidhom (a.1, a.2.1)   (b.1, b.2.1)
abgrouphom   (a b: abgroup): U = monoidhom (a.1, a.2.1.1) (b.1, b.2.1.1)
cmonabgrouphom (a: cmonoid) (b: abgroup): U = monoidhom (a.1, a.2.1) (b.1, b.2.1.1)

-- Homomorphism constructors
grouphom' (a b: group) (f: a.1.1 -> b.1.1)
          (pO: preservesOp a.1.1 b.1.1 (opGroup a) (opGroup b) f)
  : monoidhom (a.1, a.2.1) (b.1, b.2.1)
  = (f,pO,(lem_group_cancellative b).1(f(idGroup a))(f(idGroup a))(idGroup b)p) where
    p: Path b.1.1(opGroup b(f(idGroup a))(f(idGroup a)))(opGroup b (f(idGroup a))(idGroup b))
      = <i> comp (<_> b.1.1) (f ((hasIdGroup a).1 (idGroup a) @ i))
        [ (i = 0) -> pO (idGroup a) (idGroup a),
          (i = 1) -> <j> (hasIdGroup b).2 (f (idGroup a)) @ -j ]

abgrouphom' (a b: abgroup) (f: a.1.1 -> b.1.1)
    (pO: preservesOp a.1.1 b.1.1 (opCGroup a) (opCGroup b) f)
  : monoidhom (a.1, a.2.1.1) (b.1, b.2.1.1)
  = grouphom' (a.1, a.2.1) (b.1, b.2.1) f pO

-- g â f
monoidhomcomp (a b c: monoid)
    (f: monoidhom a b) (g: monoidhom b c)
  : monoidhom a c
  = (h, pO, pI) where
    h (x: a.1.1): c.1.1 = g.1 (f.1 x)
    pO (x0 x1: a.1.1): Path c.1.1 (h (a.2.1 x0 x1)) (c.2.1 (h x0) (h x1))
      = <i> comp (<_> c.1.1) (g.1 (f.2.1 x0 x1 @ i))
        [ (i = 0) -> <_> h (a.2.1 x0 x1)
        , (i = 1) -> g.2.1 (f.1 x0) (f.1 x1) ]
    pI: Path c.1.1 (h (idMonoid a)) (idMonoid c)
      = <i> comp (<_> c.1.1) (g.1 (f.2.2 @ i))
        [ (i = 0) -> <_> h (idMonoid a)
        , (i = 1) -> g.2.2 ]

-- h â (g â f) â¡ (h â g) â f
lemma_monoidcomp0 (a b c d: monoid) (f: monoidhom a b)
    (g: monoidhom b c) (h: monoidhom c d)
  : Path (monoidhom a d) (monoidhomcomp a c d (monoidhomcomp a b c f g) h)
                         (monoidhomcomp a b d f (monoidhomcomp b c d g h))
  = lemSig (a.1.1 -> d.1.1) (ismonoidhom a d) (propismonoidhom a d) f0 f1 (<_> f0.1) where
    f0: monoidhom a d = monoidhomcomp a c d (monoidhomcomp a b c f g) h
    f1: monoidhom a d = monoidhomcomp a b d f (monoidhomcomp b c d g h)

-- 1_a
idmonoidhom (a: monoid): monoidhom a a
  = (\ (x: a.1.1) -> x, \ (a0 a1: a.1.1) -> <_> opMonoid a a0 a1, <_> idMonoid a)

-- f â 1_a â¡ f
lemma_idmonoidhom0 (a b: monoid) (f: monoidhom a b)
  : Path (monoidhom a b) (monoidhomcomp a a b (idmonoidhom a) f) f
  = lemSig (a.1.1 -> b.1.1) (ismonoidhom a b) (propismonoidhom a b) h f (<_> f.1) where
    h: monoidhom a b = monoidhomcomp a a b (idmonoidhom a) f

-- 1_b â f â¡ f
lemma_idmonoidhom1 (a b: monoid) (f: monoidhom a b)
  : Path (monoidhom a b) (monoidhomcomp a b b f (idmonoidhom b)) f
  = lemSig (a.1.1 -> b.1.1) (ismonoidhom a b) (propismonoidhom a b) h f (<_> f.1) where
    h: monoidhom a b = monoidhomcomp a b b f (idmonoidhom b)

-- f(xâ»Â¹) â¡ f(x)â»Â¹
lem_grouphom_inv (g h: group) (f: grouphom g h) (x: g.1.1)
  : Path h.1.1 (f.1 (invGroup g x)) (invGroup h (f.1 x))
  = <i> comp (<_> h.1.1) (p2 @ i) [(i=0) -> (hasIdGroup h).1 (f.1 x'), (i=1) -> <_> y' ] where
    x': g.1.1 = invGroup g x
    y: h.1.1 = f.1 x
    y': h.1.1 = invGroup h y
    p0: Path h.1.1 (opGroup h y (f.1 x')) (idGroup h)
        = <i> comp (<_> h.1.1) (f.1 ((g.2.2.2).2 x @ i)) [(i=0) -> f.2.1 x x', (i=1) -> f.2.2 ]
    p1: Path h.1.1 (opGroup h (opGroup h y' y) (f.1 x')) y'
        = <i> comp (<_> h.1.1) (opGroup h y' (p0 @ i)) [(i=0) -> isAssocGroup h y' y (f.1 x'),
                                                          (i=1) -> (hasIdGroup h).2 y' ]
    p2: Path h.1.1 (opGroup h (idGroup h) (f.1 x')) y'
        = <i> comp (<_> h.1.1) (p1 @ i) [(i=0) -> <j> opGroup h ((h.2.2.2).1 y @ j) (f.1 x'),
                                         (i=1) -> <_> y' ]

--- http://cj-xu.github.io/talks/xu-m4c.pdf

isPSh (G: U) (M: monoid): U
  = (c: G -> M.1.1 -> G)
  * (left: (g: G) -> Path G (c g M.2.2.2.1) g)
  * ((g: G) (t r: M.1.1) -> Path G (c (c g t) r) (c g (M.2.1 t r)))

PSh (M: monoid): U
  = (G: U)
  * (isPSh G M)

NatPSh (M: monoid) (D G: PSh M): U
  = (sigma: D.1 -> G.1)
  * ((s: D.1)(t: M.1.1) -> Path G.1 (G.2.1 (sigma s) t) (sigma (D.2.1 s t)))

isType (M: monoid) (G: PSh M) (A: G.1 -> U): U
  = (star: (g: G.1) -> A g -> (t: M.1.1) -> A (G.2.1 g t))
  * (coe1: (g: G.1) (t: M.1.1)   -> Path U (A g) (A (G.2.1 g t)))
  * (coe2: (g: G.1) (t r: M.1.1) -> Path U (A(G.2.1(G.2.1 g t)r))(A(G.2.1 g(M.2.1 t r))))
  * (left: (g: G.1) (a: A g)     -> PathP (coe1 g M.2.2.2.1) a (star g a M.2.2.2.1))
  * ((g:G.1)(a:A g) (t r: M.1.1) -> PathP (coe2 g t r) (star (G.2.1 g t) (star g a t) r)
                                                       (star g a (M.2.1 t r)))

Type (M: monoid) (G: PSh M): U
  = (A: G.1 -> U)
  * isType M G A

-- A coverage JJ on a monoid M is a collection of subsets of M,
-- called the covering families, satisfying the coverage axiom:
-- for any IâJ and tâM,there exists a JâJJ such that for each
-- jâJ there are iâI and râM such that tâ¦j=iâ¦r.

-- A presheaf Î is a sheaf on (M, JJ) if it satisfies the
-- sheaf condition: for any IâJ and any compatible family
-- of elements {Î³_iâÎ|iâI} there exists a unique amalgamation Î³âÎ
-- such that Î³Â·i = Î³_i for all iâI. -}

-- We need to add a (dependent) sheaf condition to the
-- definition of types in the CwF of sheaves.
-- When verifying the sheaf condition of the universe,
-- we can only show that the amalgamation of a family
-- of elements in Type(M) is unique up to (pointwise) isomorphism.

