{- Homotopy Teory:
   - Homotopy Groups of Spheres;
   - Loop Space of S1 equals to Z.
   Copyright (c) Groupoid Infinity, 2016-2018 -}

module homotopy where
import s1
import trunc
import pointed
import suspension

-- Definition. Homotopy Groups of Spheres : \pi_{n}S^{m} = ||\Omega^{n}(S^{m})||_0
piS (n: nat): (m: nat) -> U = split
   zero   -> sTrunc (space (omega n (bool,false)))
   succ x -> sTrunc (space (omega n (Sn (succ x),north)))

-- Theorem. Loop Space of S1 equals to Z : \Omega^{1}(S^{1}) = Z
encode (x:S1) (p:Path S1 base x)
  : helix x
  = subst S1 helix base x p zeroZ

decode : (x:S1) -> helix x -> Path S1 base x = split
  base -> loopIt
  loop @ i -> rem @ i where
    p : Path U (Z -> loopS1) (Z -> loopS1)
      = <j> helix (loop1@j) -> Path S1 base (loop1@j)
    rem : PathP p loopIt loopIt
      = corFib1 S1 helix (\(x:S1)->Path S1 base x) base
        loopIt loopIt loop1 (\(n:Z) ->
        comp (<i> Path loopS1 (oneTurn (loopIt n))
             (loopIt (testIsoPath Z Z sucZ predZ
                      sucpredZ predsucZ n @ i)))
             (<i>(lem1It n)@-i) [])

lemTurn (n: nat): (b: bool) -> Path Z (comp (hlx b) (ze n b) []) (ze (succ n) b) = split
   false -> <i> inl (succ (comp (<_>nat) (comp (<_>nat) n [(i=1) -> <_>n]) [(i=1) -> <_>n]))
   true  -> <i> inr (succ (comp (<_>nat) (comp (<_>nat) n [(i=1) -> <_>n]) [(i=1) -> <_>n]))

encodeNeg: (n: nat)-> Path Z (comp (<x> helix (loopZ n false @ x)) zeroZ []) (ze n false) = split
  zero -> refl Z (ze zero false)
  succ n -> (comp (<i> Path Z (htz n false) (lemTurn n false @ i))
            (comp (<i> Path Z (htz n false) (comp (hlx false) (encodeNeg n @ i) []))
                  (<i> lemFib2 S1 helix base base (lnb n false) zeroZ base (inversion false) @ -i) []) [])

encodePos: (n: nat)-> Path Z (comp (<x> helix (loopZ n true @ x)) zeroZ []) (ze n true) = split
  zero -> refl Z (ze zero true)
  succ n -> (comp (<i> Path Z (htz n true) (lemTurn n true @ i))
            (comp (<i> Path Z (htz n true) (comp (hlx true) (encodePos n @ i) []))
                  (<i> lemFib2 S1 helix base base (lnb n true) zeroZ base (inversion true) @ -i) []) [])

retractZ : (n : Z) -> Path Z (encode base (decode base n)) n = split
  inl n -> encodeNeg n
  inr n -> encodePos n

sectionZ (p: Path S1 base base) : Path (Path S1 base base) (decode base (encode base p)) p
  = comp (<i>Path (Path S1 base (p@i)) (decode (p@i) (encode (p@i) (<j>p@(i/\j)))) (<j>p@(i/\j)))
         (refl loopS1 triv) []

loopS1eqZ : Path U Z loopS1
  = isoPath Z loopS1 (decode base) (encode base) sectionZ retractZ

